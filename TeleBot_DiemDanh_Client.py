import json
import threading
import requests
import winsound
import tkinter as tk
import websocket
import time
from pymongo import MongoClient
from pystray import Icon, MenuItem, Menu
from PIL import Image

# üîπ K·∫øt n·ªëi MongoDB Atlas
MONGO_URI = "mongodb+srv://kandesfx:hehe1234@kandes.xdh45.mongodb.net/?retryWrites=true&w=majority&appName=Kandes"
client = MongoClient(MONGO_URI)
db = client['telebot']
ip_collection = db['server_ip']

# üîπ C·∫•u h√¨nh ban ƒë·∫ßu
SERVER_URL = ""
WS_SERVER = ""

def get_latest_server_ip():
    global SERVER_URL, WS_SERVER
    try:
        doc = ip_collection.find_one(sort=[("timestamp", -1)])
        if doc and "ip" in doc:
            new_ip = doc["ip"]
            new_server_url = f"http://{new_ip}:5000"
            new_ws_server = f"ws://{new_ip}:6789"
            if new_server_url != SERVER_URL:
                print(f"üîÑ C·∫≠p nh·∫≠t IP server: {new_ip}")
                SERVER_URL = new_server_url
                WS_SERVER = new_ws_server
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y IP m·ªõi t·ª´ MongoDB:", e)

def auto_update_server_ip():
    while True:
        get_latest_server_ip()
        time.sleep(420)  # 7 ph√∫t (420 gi√¢y)

# ======================= HI·ªÇN TH·ªä C·ª¨A S·ªî C·∫¢NH B√ÅO =======================
def show_alert(title, message):
    def close_window():
        alert_window.destroy()
    
    winsound.MessageBeep()
    alert_window = tk.Tk()
    alert_window.title(title)
    alert_window.geometry("300x150")
    
    tk.Label(alert_window, text=message, font=("Arial", 14), fg="red").pack(pady=20)
    tk.Button(alert_window, text="OK", command=close_window).pack()
    
    alert_window.mainloop()

# ======================= NH·∫¨N TH√îNG B√ÅO QUA WEBSOCKET =======================
def on_message(ws, message):
    data = json.loads(message)
    if "title" in data and "body" in data:
        show_alert(data["title"], data["body"])

def on_error(ws, error):
    print("‚ùå L·ªói WebSocket:", error)

def on_close(ws, close_status_code, close_msg):
    print("üîå K·∫øt n·ªëi WebSocket b·ªã ƒë√≥ng.")

def on_open(ws):
    print("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng!")

def start_websocket():
    while True:
        try:
            print(f"üîó K·∫øt n·ªëi WebSocket t·ªõi {WS_SERVER}...")
            ws = websocket.WebSocketApp(WS_SERVER, on_message=on_message, on_error=on_error, on_close=on_close)
            ws.on_open = on_open
            ws.run_forever()
        except Exception as e:
            print("‚ùå L·ªói khi k·∫øt n·ªëi WebSocket:", e)
        time.sleep(5)  # Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu l·ªói

# ======================= CH·∫†Y ·ª®NG D·ª§NG TRONG SYSTEM TRAY =======================
def create_tray_icon():
    try:
        icon_image = Image.open("icon.png")
        menu = Menu(MenuItem("Tho√°t", lambda: exit(0)))
        tray_icon = Icon("notification_client", icon_image, menu=menu)
        tray_icon.run()
    except FileNotFoundError:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y icon.png!")

# üîπ Ch·∫°y ·ª©ng d·ª•ng
threading.Thread(target=auto_update_server_ip, daemon=True).start()
time.sleep(5)  # Ch·ªù c·∫≠p nh·∫≠t IP tr∆∞·ªõc khi k·∫øt n·ªëi WebSocket
threading.Thread(target=start_websocket, daemon=True).start()
threading.Thread(target=create_tray_icon, daemon=True).start()
while True:
    time.sleep(60)