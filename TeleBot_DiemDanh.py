import json
import threading
import requests
import winsound
import tkinter as tk
import websocket
import time
import socket
from pymongo import MongoClient
from pystray import Icon, MenuItem, Menu
from PIL import Image
import google.auth
from google.auth.transport.requests import Request
from telethon import TelegramClient, events

# üîπ K·∫øt n·ªëi MongoDB Atlas
MONGO_URI = "mongodb+srv://kandesfx:hehe1234@kandes.xdh45.mongodb.net/?retryWrites=true&w=majority&appName=Kandes"
client = MongoClient(MONGO_URI)
db = client['telebot']
ip_collection = db['server_ip']
tokens_collection = db['tokens']

# üîπ C·∫•u h√¨nh Firebase
# SERVICE_ACCOUNT_FILE = "telebot-notifier-40f49352f756.json"
PROJECT_ID = "telebot-notifier"

# üîπ Th√¥ng tin Telegram API
API_ID = 22359020
API_HASH = "6dbb9685d5fcb675affaa37ce5018d12"
GROUP_ID = -4646855241
telegram_client = TelegramClient("session_name", API_ID, API_HASH)

# üîπ C·∫•u h√¨nh ban ƒë·∫ßu
SERVER_URL = ""
WS_SERVER = ""

def get_latest_server_ip():
    global SERVER_URL, WS_SERVER
    try:
        doc = ip_collection.find_one(sort=[("timestamp", -1)])
        if doc and "ip" in doc:
            new_ip = doc["ip"]
            new_server_url = f"http://{new_ip}:5000"
            new_ws_server = f"ws://{new_ip}:6789"
            if new_server_url != SERVER_URL:
                print(f"üîÑ C·∫≠p nh·∫≠t IP server: {new_ip}")
                SERVER_URL = new_server_url
                WS_SERVER = new_ws_server
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y IP m·ªõi t·ª´ MongoDB:", e)

def auto_update_server_ip():
    while True:
        get_latest_server_ip()
        time.sleep(420)  # 7 ph√∫t (420 gi√¢y)

# üîπ Ch·∫°y c·∫≠p nh·∫≠t IP tr∆∞·ªõc khi ti·∫øp t·ª•c
get_latest_server_ip()
if not WS_SERVER:
    print("‚ùå Kh√¥ng th·ªÉ l·∫•y IP t·ª´ MongoDB. Tho√°t ch∆∞∆°ng tr√¨nh!")
    exit(1)

# ======================= G·ª¨I TH√îNG B√ÅO T·ªöI FCM =======================
def get_access_token():
    credentials = google.auth.load_credentials_from_file(SERVICE_ACCOUNT_FILE, scopes=["https://www.googleapis.com/auth/cloud-platform"])[0]
    credentials.refresh(Request())
    return credentials.token

def get_all_tokens():
    return [doc["token"] for doc in tokens_collection.find()]

def send_fcm_notification(title, body):
    access_token = get_access_token()
    url = f"https://fcm.googleapis.com/v1/projects/{PROJECT_ID}/messages:send"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    tokens = get_all_tokens()
    if not tokens:
        print("‚ùå Kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒëƒÉng k√Ω.")
        return
    
    for token in tokens:
        payload = {
            "message": {
                "token": token,
                "notification": {
                    "title": title,
                    "body": body
                },
                "android": {
                    "priority": "high"
                },
                "apns": {
                    "payload": {
                        "aps": {
                            "sound": "default"
                        }
                    }
                }
            }
        }
        try:
            response = requests.post(url, headers=headers, json=payload)
            print("‚úÖ G·ª≠i FCM Response:", response.json())
        except Exception as e:
            print("‚ùå L·ªói khi g·ª≠i FCM:", e)

# ======================= L·∫ÆNG NGHE TIN NH·∫ÆN TELEGRAM =======================
async def start_telegram():
    async with telegram_client:
        @telegram_client.on(events.NewMessage(chats=GROUP_ID))
        async def handler(event):
            message = event.message.message
            if "ƒëi·ªÉm danh" in message.lower():
                print("üì© C√≥ d·∫•u hi·ªáu th√¥ng b√°o ƒëi·ªÉm danh!")
                send_fcm_notification("Th√¥ng b√°o ƒëi·ªÉm danh", message)
        
        print("üöÄ Telegram listener ƒëang ch·∫°y...")
        await telegram_client.run_until_disconnected()

def run_telegram_listener():
    import asyncio
    asyncio.run(start_telegram())

# ======================= C·∫¨P NH·∫¨T IP PUBLIC =======================
def get_public_ip():
    try:
        response = requests.get("http://checkip.amazonaws.com", timeout=5)
        return response.text.strip()
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y IP public:", e)
        return None

# ======================= NH·∫¨N TH√îNG B√ÅO QUA WEBSOCKET =======================
def start_websocket():
    while True:
        get_latest_server_ip()  # üîÑ L·∫•y IP m·ªõi nh·∫•t tr∆∞·ªõc m·ªói l·∫ßn k·∫øt n·ªëi
        if not WS_SERVER:
            print("‚ùå Ch∆∞a c√≥ ƒë·ªãa ch·ªâ WebSocket, ch·ªù c·∫≠p nh·∫≠t...")
            time.sleep(10)
            continue
        
        try:
            print(f"üîó K·∫øt n·ªëi WebSocket t·ªõi {WS_SERVER}...")
            ws = websocket.WebSocketApp(WS_SERVER, 
                                        on_message=lambda ws, msg: send_fcm_notification("Th√¥ng b√°o", msg),
                                        on_error=lambda ws, err: print("‚ùå L·ªói WebSocket:", err),
                                        on_close=lambda ws, code, msg: print("üîå K·∫øt n·ªëi WebSocket b·ªã ƒë√≥ng."))
            ws.on_open = lambda ws: print("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng!")
            ws.run_forever()
        except Exception as e:
            print("‚ùå L·ªói khi k·∫øt n·ªëi WebSocket:", e)
        time.sleep(5)  # Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu l·ªói

# üîπ Ch·∫°y ·ª©ng d·ª•ng
threading.Thread(target=auto_update_server_ip, daemon=True).start()
time.sleep(5)  # Ch·ªù c·∫≠p nh·∫≠t IP tr∆∞·ªõc khi k·∫øt n·ªëi WebSocket
threading.Thread(target=start_websocket, daemon=True).start()
threading.Thread(target=run_telegram_listener, daemon=True).start()

# üîπ C·∫≠p nh·∫≠t IP server l√™n MongoDB
try:
    public_ip = get_public_ip()
    if public_ip:
        ip_collection.insert_one({"ip": public_ip, "timestamp": time.time()})
        print(f"‚úÖ IP server ({public_ip}) ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t l√™n MongoDB.")
    else:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t IP public l√™n MongoDB.")
except Exception as e:
    print("‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t IP l√™n MongoDB:", e)

# Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
while True:
    time.sleep(60)
